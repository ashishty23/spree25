{"ast":null,"code":"// // App.js\n// import React, { useState, useEffect } from 'react';\n// import { MdLocationOn } from \"react-icons/md\";\n// import './App.css';\n\n// const App = () => {\n//   const totalPoints = 5;\n//   const [containerWidth, setContainerWidth] = useState(window.innerWidth);\n//   const pointSpacing = containerWidth / (totalPoints - 1);\n//   const speed = 2; // px per frame\n\n//   const [currentPosition, setCurrentPosition] = useState(0);\n//   const [currentPointIndex, setCurrentPointIndex] = useState(0);\n//   const [infoPoints, setInfoPoints] = useState(Array(totalPoints).fill(false));\n\n//   useEffect(() => {\n//     const handleResize = () => {\n//       setContainerWidth(window.innerWidth);\n//     };\n\n//     window.addEventListener('resize', handleResize);\n//     return () => window.removeEventListener('resize', handleResize);\n//   }, []);\n\n//   useEffect(() => {\n\n//     const intervalId = setInterval(() => {\n//       if (currentPointIndex < totalPoints) {\n//         const targetPosition = currentPointIndex * pointSpacing;\n\n//         // Move the object\n//         if (currentPosition < targetPosition) {\n//           setCurrentPosition((prevPosition) => {\n//             const nextPosition = prevPosition + speed;\n//             return nextPosition > targetPosition ? targetPosition : nextPosition;\n//           });\n//         }\n\n//         // Trigger information display when reaching the point\n//         if (currentPosition === targetPosition) {\n//           setInfoPoints((prev) => {\n//             const newInfoPoints = [...prev];\n//             newInfoPoints[currentPointIndex] = true;\n//             return newInfoPoints;\n//           });\n//           setCurrentPointIndex((prevIndex) => prevIndex + 1);\n//         }\n//       }\n//     }, 20);\n\n//     return () => clearInterval(intervalId);\n\n//   }, [currentPosition, currentPointIndex, pointSpacing, totalPoints]);\n\n//   return (\n//     <div className=\"line-container\" style={{ width: `${containerWidth}px` }}>\n//       <div className=\"moving-object\" style={{ left: `${currentPosition}px` }}>\n//         <img className=\"moving-object\" src = \"/assets/auto1.png\" alt=''/>\n//       </div>\n//       {Array.from({ length: totalPoints }, (_, index) => (\n\n//         <div key={index} className=\"point\" style={{ left: `${index * pointSpacing}px` }}>\n\n//           {infoPoints[index] && (\n\n//             <div className=\"info-box\">\n//               <div className=''><MdLocationOn className=\"icon\" />\n\n//                 </div>\n//                 <div className='Reachpoint'>Reached Point {index + 1}</div>\n//                 </div>\n//           )}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/neeraj/Desktop/animation/my-app/src/App.js"],"sourcesContent":["// // App.js\n// import React, { useState, useEffect } from 'react';\n// import { MdLocationOn } from \"react-icons/md\";\n// import './App.css';\n\n// const App = () => {\n//   const totalPoints = 5;\n//   const [containerWidth, setContainerWidth] = useState(window.innerWidth);\n//   const pointSpacing = containerWidth / (totalPoints - 1);\n//   const speed = 2; // px per frame\n\n//   const [currentPosition, setCurrentPosition] = useState(0);\n//   const [currentPointIndex, setCurrentPointIndex] = useState(0);\n//   const [infoPoints, setInfoPoints] = useState(Array(totalPoints).fill(false));\n\n//   useEffect(() => {\n//     const handleResize = () => {\n//       setContainerWidth(window.innerWidth);\n//     };\n\n//     window.addEventListener('resize', handleResize);\n//     return () => window.removeEventListener('resize', handleResize);\n//   }, []);\n\n//   useEffect(() => {\n\n//     const intervalId = setInterval(() => {\n//       if (currentPointIndex < totalPoints) {\n//         const targetPosition = currentPointIndex * pointSpacing;\n\n//         // Move the object\n//         if (currentPosition < targetPosition) {\n//           setCurrentPosition((prevPosition) => {\n//             const nextPosition = prevPosition + speed;\n//             return nextPosition > targetPosition ? targetPosition : nextPosition;\n//           });\n//         }\n\n//         // Trigger information display when reaching the point\n//         if (currentPosition === targetPosition) {\n//           setInfoPoints((prev) => {\n//             const newInfoPoints = [...prev];\n//             newInfoPoints[currentPointIndex] = true;\n//             return newInfoPoints;\n//           });\n//           setCurrentPointIndex((prevIndex) => prevIndex + 1);\n//         }\n//       }\n//     }, 20);\n\n//     return () => clearInterval(intervalId);\n\n//   }, [currentPosition, currentPointIndex, pointSpacing, totalPoints]);\n\n//   return (\n//     <div className=\"line-container\" style={{ width: `${containerWidth}px` }}>\n//       <div className=\"moving-object\" style={{ left: `${currentPosition}px` }}>\n//         <img className=\"moving-object\" src = \"/assets/auto1.png\" alt=''/>\n//       </div>\n//       {Array.from({ length: totalPoints }, (_, index) => (\n        \n//         <div key={index} className=\"point\" style={{ left: `${index * pointSpacing}px` }}>\n          \n//           {infoPoints[index] && (\n\n//             <div className=\"info-box\">\n//               <div className=''><MdLocationOn className=\"icon\" />\n\n//                 </div>\n//                 <div className='Reachpoint'>Reached Point {index + 1}</div>\n//                 </div>\n//           )}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default App;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}